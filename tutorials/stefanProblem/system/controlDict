/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     LSThermalPhaseChangeFlow;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         50;

deltaT          1e-7;

writeControl    adjustableRunTime;

writeInterval   10;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.5;
maxAlphaCo      0.5;
maxDeltaT       2e-4;


functions
{
    interfaceParameters
    {
        type interfaceParameters;
        libs ("libinterfaceParametersFunctionObject.so");
        phase alpha.water;
        writeControl    writeTime;
        writeToFile true;
        enabled true;
    }

    stefanInterface
    {
        // Load the library containing the 'coded' functionObject
        libs ("libutilityFunctionObjects.so");
        type coded;
        writeControl  adjustableRunTime;
        writeInterval 1;
        
        // Name of on-the-fly generated functionObject
        name stefanInterface;
        
        // List of include search directories
        codeOptions
        #{
            -I$(LIB_SRC)/sampling/lnInclude \
            -I$(LIB_SRC)/surfMesh/lnInclude 
        #};
        
        // List of libraries to link with
        codeLibs
        #{
            -lsampling \
            -lsurfMesh 
        #};
        
        // List of include files
        codeInclude
        #{
            #include "sampledIsoSurfaceCell.H"
        #};     
        
        // Code
        codeWrite
        #{
            // Compute isosurface alpha=0.5
            dictionary isoSurfDict;
            isoSurfDict.add("type","isoSurfaceCell");
            isoSurfDict.add("isoField","alpha.water");
            isoSurfDict.add("isoValue",0.5);
            isoSurfDict.add("interpolate",false);
            sampledIsoSurfaceCell isoInterface("isoInterface", mesh(), isoSurfDict);
            isoInterface.update();
            
            // Compute position of the isosurface
            const pointField& pf = isoInterface.points();
            scalar xinter = 0.002;
            forAll(pf, i)
            {
              xinter = min(pf[i][0],xinter);
            }
            
            // Print results
            Info << "Interface position (x) = " << xinter << "\n" << endl;
        #};
    }
    
    #includeFunc components(U)
    #includeFunc "writeCellCentres"

    
    line1
    {
        type                    sets;
        libs                    (sampling);
        executeControl          onEnd;
        writeControl            adjustableRunTime;
        writeInterval           1;
        interpolationScheme     cellPoint;
        setFormat               raw;
        sets
        (
            line
            {
                type            uniform;
                axis            x;
                start           (0 1e-5 1e-5);
                end             (2e-3 1e-5 1e-5);
                nPoints         400;
            }
        );
        fields  (T);
    }
    
}

// ************************************************************************* //

  
