#!/bin/sh
cd ${0%/*} || exit 1                        # Run from this directory
. $WM_PROJECT_DIR/bin/tools/RunFunctions    # Tutorial run functions.
. $WM_PROJECT_DIR/bin/tools/CleanFunctions  # Tutorial clean functions


interfaceMethods="
isoAdvector
MULES
"

MAXX="25 75 125 175"


        
        for XM in $MAXX
            do

                
                for method in $interfaceMethods
                    do


                        
# Extracting interface location                        
echo " 0    0.00008" >> stefan_case.dat # Header     
grep -e '^Time =' -e '^Interface position (x)' $method$XM/log.$(getApplication) | awk -F'=' '/Time =/ {t=$NF} /Interface position*/ {print t"	"$NF}' >> stefan_case.dat # Print results
          
          

# Extracting interface parameters
input="$method$XM/postProcessing/interfaceParameters/0/interfaceParameters.dat"
output="interfaceParameters.dat"
cat $input | grep -v '^#' | sed -e 's/[()]//g' | awk '{print $1" "$2" "$3" "$4" "$5" "$6}' >> $output
            
# Get simulation global data to normalize thickness
Sc=`grep scale system/blockMeshDict | awk '{print $NF}' | sed -e 's/;//g' | head -1`
X1=`grep X1 system/blockMeshDict | awk '{print $NF}' | sed -e 's/;//g' | head -1`
X=`echo $Sc $X1 | awk '{ printf("%.16G\n", $1*$2) }'`   
                        
sigma=`grep 'sigma' constant/transportProperties | awk '{print $NF}' | sed -e 's/;//g'`
rhog=`grep -m2 rho constant/transportProperties | awk '{print $NF}' | sed -e 's/;//g' | tail -n1`
#compute t_sigma
tsigma=`echo $rhog $sigma $X | awk '{ printf("%.16G\n",sqrt($1*$3*$3*$3/$2)) }'`
                        
#compute x* and t*
input="stefan_case.dat"
output="t_star_vs_x_star.dat"
cat $input | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G %.16G\\\\\n", $1/'"${tsigma}"',$2/'"${X}"') }' >> $output
                        
hg=`grep -m2 hf constant/transportProperties | awk '{print $NF}' | sed -e 's/;//g' | tail -n1`
kappag=`grep -m2 kappa constant/transportProperties | awk '{print $NF}' | sed -e 's/;//g' | tail -n1`
Cpg=`grep -m2 Cp constant/transportProperties | awk '{print $NF}' | sed -e 's/;//g' | tail -n1`
alphag=`echo $kappag $Cpg $rhog  | awk '{ printf("%.16G\n",$1/($2*$3)) }'`

                        
#calculating Aalytical results for thickness
input="stefan_case.dat"
output="Analytical_stefan_case.dat"
Cc="0.0814742"
t0="0.0952366"
cat $input | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G %.16G\\\\\n", $1, '"2*${Cc}*(${alphag})^(.5)"'*($1+'"${t0}"')^(.5)) }' >> $output
                        
#compute analytical t* and x*
input="Analytical_stefan_case.dat"
output="Analytical_t_star_vs_x_star.dat"
cat $input | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G %.16G\\\\\n", $1/'"${tsigma}"',$2/'"${X}"') }' >> $output
                        
#compute error for thickness
input1="Analytical_stefan_case.dat"
input2="stefan_case.dat"
error=`pr -m -t  $input1 $input2 | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G\n", (($4-$2)/($2))^2) }' | awk '{ total += $1 } END { print (total/NR)^.5 }'`
                        
#Extract clock time
input="$method$XM/log.$(getApplication)"
output="$method"_clockTime.txt
clockTime=`cat $input | grep -e 'ClockTime =' | tail -n1 | sed -e 's/s//g'| awk '{print $NF}'`
echo $XM $clockTime | awk '{ printf("%.16G %.16G\\\\\n", $1,$2) }' >> $output
                        
#Extract error for thickness
output1="$method"_L2error_intrface.txt
output2="$method"_error_intrface.txt
echo $XM $error | awk '{ printf("%.16G %.16G\\\\\n", $1,log($2)/log(10)) }' >> $output1
echo $XM $error | awk '{ printf("%.16G %.16G\\\\\n", $1,$2) }' >> $output2

                        
#modified temperature for after 20 sec 
X_20="0.00116207649734193"
T_wall="463.03"
T0="453.03"
deltaT="10"
input="$method$XM/postProcessing/line1/20/line_T.xy"
output1="T_profile.dat"
output2="After20_T_profile.dat"
output3="Afterboundary_T_profile.dat"
cat $input |head -232 | awk '{ printf("%.16G %.16G\\\\\n", $1,$2) }' >> $output2
# echo $X_20 $T0 | awk '{ printf("%.16G %.16G\\\\\n", $1,$2) }' >> $output2
# echo $X $T0 | awk '{ printf("%.16G %.16G\\\\\n", $1,$2) }' >> $output2
cat $input | awk '{ printf("%.16G %.16G\\\\\n", $1,$2) }' >> $output1
cat $input |tail -n +233 | awk '{ printf("%.16G %.16G\\\\\n", $1,$2) }' >> $output3

                        
#Analytical temperature profile at 20 s

input1="After20_T_profile.dat"
input2="Afterboundary_T_profile.dat"
output="Analytical_T_profile.dat"
cat $input1 | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G %.16G\\\\\n",$1, '"${T_wall}"'-'"(${deltaT}/${X_20})"'*$1) }' >> $output
cat $input2 | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G %.16G\\\\\n",$1, '"${T0}"') }' >> $output
                        
                        
#calculating Jakob number and x*
input="T_profile.dat"
input2="Analytical_T_profile.dat"
output1="Ja_vs_x_star.dat"
output2="Analytical_Ja_vs_x_star.dat"
cat $input1 | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G %.16G\\\\\n", $1/'"${X}"','"(${Cpg}/(${hg}))"'*($2-'"${T0}"')) }' >> $output1
cat $input2 | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G %.16G\\\\\n", $1/'"${X}"','"(${Cpg}/(${hg}))"'*($2-'"${T0}"')) }' >> $output2                  
                        
#compute error for temperature
input1="Analytical_T_profile.dat"
input2="T_profile.dat"
output1="$method"_L2error_temp.txt
output2="$method"_error_temp.txt
error=`pr -m -t $input1 $input2 | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G\n", (($4-$2)/($2))^2) }' | awk '{ total += $1 } END { print (total/NR)^.5 }'`
echo $XM $error | awk '{ printf("%.16G %.16G\\\\\n", $1,log($2)/log(10)) }' >> $output1
echo $XM $error | awk '{ printf("%.16G %.16G\\\\\n", $1,$2) }' >> $output2

#Extract thickness
input="interfaceParameters.dat"
output="$method"_thickness.txt
thickness=$(awk 'NR ==5 {print $6}' $input)
echo $XM $thickness | awk '{ printf("%.16G %.16G\\\\\n", $1,$2) }' >> $output
                        

output="overview.txt"
echo $method $XM $clockTime $error $thickness| awk '{ printf("%-10s %.16G %.16G %.16G %.16G\\\\\n", $1,$2,$3,$4,$5) }' >> $output
                        
                        methodDir="$method$XM"
                        mv -f *.dat "$method$XM"
                        done
            done



#------------------------------------------------------------------------------
